replicaCount: 3
image:
  repository: imperva-anywhere-docker/security_engine
  pullPolicy: IfNotPresent
  tag: 2.1.7
  tagSuffix: ""
  digest: "" # image digest to use, takes precedence over tag if specified

# Auxiliary images to support the main application
auxImages:
  fluentBit:
    # Container that'll be used for log shipping, running as a sidecar (3rd Party)
    repository: imperva-waf-anywhere-beta-docker/aux/fluent-bit
    pullPolicy: IfNotPresent
    tag: 4.0.9
    tagSuffix: ""
    digest: "" # image digest to use, takes precedence over tag if specified
  busyBox:
    # Container that'll be used for general purposes operations (3rd Party)
    repository: imperva-waf-anywhere-beta-docker/aux/busybox
    pullPolicy: IfNotPresent
    tag: 1.36.1
    tagSuffix: ""
    digest: "" # image digest to use, takes precedence over tag if specified

imagePullSecrets:
- name: waf-anywhere-artifactory
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: # capabilities:

#   add:
#     - SYS_ADMIN
# allowPrivilegeEscalation: true
# privileged: true

securityContext:
  capabilities:
    add:
    - SYS_ADMIN
  allowPrivilegeEscalation: true
  privileged: true

service:
  annotations: {}
  type: ClusterIP
  port: 8443
  appProtocol: ""

# ingress:
#   enabled: false
#   className: ""
#   annotations: {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: chart-example.local
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls: []
#  - secretName: chart-example-tls
#    hosts:
#      - chart-example.local

# For Autoscaling to work, it is mandatory to specify both resources and limits on all the containers.
resources:
  fbit:
    requests:
      cpu: "100m"
      memory: 100Mi
    limits:
      cpu: "150m"
      memory: 150Mi
  main:
    requests:
      cpu: "500m"
      memory: 1800Mi
      memory_ip2asn: 2048Mi
    limits:
      cpu: "1"
      memory: 1800Mi      
      memory_ip2asn: 2048Mi

## Configure extra options for LSE containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
startupProbe:
  enabled: false
  path: "/ready"
  port: 8081
  initialDelaySeconds: 0
  periodSeconds: 1
  timeoutSeconds: 1
  failureThreshold: 60
  successThreshold: 1

livenessProbe:
  enabled: true
  path: "/up"
  port: 8081
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  path: "/ready"
  port: 8081
  initialDelaySeconds: 0
  periodSeconds: 8
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

  #volumeMounts:

  #volumes:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120
    scaleUp:
      policies:
      - periodSeconds: 10
        type: Percent
        value: 100
      selectPolicy: Max
      stabilizationWindowSeconds: 0
  scaleTargetRefOverride: {}
  # Example override:
  # scaleTargetRefOverride:
  #   apiVersion: argoproj.io/v1alpha1
  #   kind: Rollout
  #   name: my-rollout
nodeSelector: {}

tolerations: []

affinity: {}

global:
  env: prod
  debug: false
  ingressControllerNamespace: "" # Namespace where the Envoy proxy is installed. If left blank, the namespace will be taken from the to be the WAF Anywhere release namespace
  failOpen: false # value which enables the traffic if LSE pod is unavailable (default is false, no traffic allowed)
  registry: imperva.jfrog.io # Registry for the images, will be used throughout the charts
  certificates:
    allowAnyCertificate: false # Allow any certificate to be used for the communication with the WAF Anywhere Cloud services
    certFilePath: "" # Path to the certificate file that will be used for the communication with the WAF Anywhere Cloud services. Leave empty to use the default certificates.
    secretCertName: "" # The name of the secret containing the certificate file, supplied by the customer. Must exist in the installation namespace before installation. Leave blank to use the default certificates.
  proxy:
    # Configuration for setting http_proxy, https_proxy, and no_proxy environment variables
    https: "" # Set the proxy that will be used to access URLs that use the HTTP protocol. Leave empty if not needed.
    noProxy: "" # Set a comma-separated list of addresses to exclude from the proxy. Leave empty if not needed.
  caCertificate: ""
  caKey: ""
  gradualCfgRollout:
    enabled: false # Enable gradual configuration rollout, adds a configuration validation pod before applying the configuration to the security engine.
    sandboxesSetup: 1 # Number of sandbox pods to set up for the security engine if gradual configuration rollout is enabled, default is 1

ip2asn: false # this features allows IP-to-ASN database synchronization
WN: 1 # number of workers (threads) of LSE

fluentbit:
  enabled: true
  collectAndSendLogs: true
  total_log_storage: 5M # Total storage size for logs

awf:
  enabled: false

isVpopMt: false # Set to true if the installation is for a IGC (vpop) multi-tenancy environment.
sourceEnv: "LSE" # Source environment for the LSE, used for resource usage tracking and reporting.
region: "" # Region where the LSE is installed, used for resource usage tracking and reporting.

redis-cluster:
  enabled: false
  usePassword: false
  persistence:
    enabled: false
  tls:
    enabled: true
    autoGenerated: true
