{{- if .Values.fluentbit.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config-mediator
data:
  fluent-bit.conf: |

    [SERVICE]
        Flush                  30
        Log_Level              info
        Parsers_File           /fluent-bit/etc/parsers.conf
        storage.checksum       on
        storage.backlog.mem_limit 10M
        scheduler.base         3
        scheduler.cap          300

    {{- if .Values.fluentbit.collectAndSendLogs }}
    [INPUT]
        Name                   tail
        Buffer_Chunk_Size      32K
        Path                   {{ .Values.log.appLogFilePath }},{{ .Values.log.componentLogFilePath }}
        Tag                    mediator_main

    [INPUT]
        Name                   tail
        Buffer_Chunk_Size      32K
        Path                   {{ .Values.log.performanceLogFilePath }}
        Parser                 json
        Tag                    mediator_performance


    [FILTER]
        Name                   parser
        Match                  mediator_main
        Key_Name               log
        Parser                 json

    [FILTER]
        Name                   lua
        Match                  mediator_*
        Script                 /fluent-bit/etc/filters.lua
        Call                   cm_levels_and_metadata

    [OUTPUT] # Logs are sent from the cloud mediator fluentbit client to the DS fluentbit client
        Name                   forward
        Match                  *
        Host                   imperva-data-sender
        Port                   24224
        tls                    off
        tls.verify             off
        tls.debug              4
        Self_Hostname          imperva-cloud-mediator
        storage.total_limit_size   {{ .Values.fluentbit.total_log_storage }}

    [OUTPUT]
        Name                       stdout
        Match                      *
        Retry_Limit                3
        storage.total_limit_size   0

    {{- end }}

  # This lua script is in charge of converting the log record to the required structure (The record is in JSON format)
  filters.lua: |
    function cm_levels_and_metadata(tag, timestamp, record)
        -- Ensuring every log has the hostname, appname and no microseconds key
        record['hostname'] =  os.getenv("HOSTNAME")
        record['appname'] =  "cloud-mediator"
        -- add timestamp to log in case of timestamp not exists (in case the log wasn't parsed by json parser)
        if record['timestamp'] == nil then
          record['timestamp'] = timestamp * 1000 -- convert to milliseconds units
        end
        -- Mapping log levels
        local currLevel = record['level']
        if currLevel == 30 or currLevel == 'I' then
          record['level'] = 'info'
        elseif currLevel == 40 or currLevel == 'W' then
          record['level'] = 'warn'
        elseif currLevel == 50 or currLevel == 'E' then
          record['level'] = 'error'
        elseif currLevel == 20 or currLevel == 'D' then
          record['level'] = 'debug'
        end
        return 1, timestamp, record
    end

  parsers.conf: |
    [PARSER]
        Name        json
        Format      json
{{- end }}
