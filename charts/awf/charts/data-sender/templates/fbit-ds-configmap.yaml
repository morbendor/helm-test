{{- if .Values.fluentbit.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config-data-sender
data:
  fluent-bit.conf: |
    @INCLUDE /mnt/shared/token.conf

    [SERVICE]
        Flush                  30
        Log_Level              info
        Parsers_File           /fluent-bit/etc/parsers.conf
        storage.path           /var/log/flb-storage/
        storage.checksum       on
        storage.backlog.mem_limit 10M
        scheduler.base         3
        scheduler.cap          300

    [SERVICE]
        HTTP_Server  On
        HTTP_Listen  0.0.0.0
        HTTP_PORT    2020
        Hot_Reload   On

    {{- if .Values.fluentbit.collectAndSendLogs }}
    [INPUT] # Logs from the /var/log/ folder
        Name                   tail
        Buffer_Chunk_Size      32K
        Path                   {{ .Values.log.appLogFilePath }}
        Parser                 json
        Tag                    ds_main
    {{- end }}

    [INPUT]
        Name                   forward
        Listen                 0.0.0.0
        Port                   24224
        Buffer_Chunk_Size      32KB
        Buffer_Max_Size        64KB

    {{- if .Values.fluentbit.collectAndSendLogs }}
    [FILTER] # Unstructured logs filter - logs that couldnt be parsed have the 'log' key, we structure them with default values
        Name                   modify
        Match                  ds_main
        Condition              Key_Exists log
        Add                    caller unspecified
        Add                    level info
        Rename                 log message

    [FILTER]
        Name                   lua
        Match                  ds_main
        Script                 /fluent-bit/etc/filters.lua
        Call                   ds_levels_and_metadata
    {{- end }}

    [OUTPUT]
        Name                   http
        Match                  *
        Host                   {{ (eq "prod" .Values.global.env) | ternary "anywhere-gateway.us.impervaservices.com" "anywhere-gateway.us.stage.impervaservices.com" }}
        Port                   443
    {{- if eq .Values.fluentbit.useApiKeys false }}
        Header                 Authorization Bearer ${token}
    {{- else }}
        Header                 x-api-key ${IMPERVA_API_KEY}
        Header                 x-api-id ${IMPERVA_API_ID}
    {{ end }}
        Header                 controller-metadata ${NODE_NAME},${IMPERVA_INSTANCE_ID},${IMPERVA_CHART_VERSION},${INGRESS_TYPE},${IMPERVA_CONTROLLER_PACKAGE_KEY}
        Header                 Content-Type application/msgpack
        URI                    /anywhere-data-service/anywhere-data-receiver/v2/instances/logs
        tls                    On
        tls.debug              3
{{- if .Values.global.certificates.allowAnyCertificate }}
        tls.verify             Off
{{- else }}
        tls.verify             On
    {{- if .Values.global.certificates.certFilePath }}
        tls.ca_file            {{ .Values.global.certificates.certFilePath }}
    {{- end }}
{{- end }}
        compress               gzip
        Format                 msgpack
        allow_duplicated_headers  false
        Retry_Limit            3
        storage.total_limit_size   {{ .Values.fluentbit.total_log_storage }}

    [OUTPUT]
        Name                       stdout
        Match                      *
        Format                     json
        storage.total_limit_size   0

  # This lua script is in charge of converting the log record to the required structure (The record is in JSON format)
  filters.lua: |
    function ds_levels_and_metadata(tag, timestamp, record)
         -- Ensuring every log has the hostname, appname and no microseconds key
        record['hostname'] =  os.getenv("HOSTNAME")
        record['appname'] =  "data-sender"
        return 1, timestamp, record
    end


  parsers.conf: |
    [PARSER]
        Name        json
        Format      json
{{- end }}
