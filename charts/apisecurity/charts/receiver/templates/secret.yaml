{{- if .Values.tlsCerts.enabled }}
{{- $serviceName := .Values.tlsCerts.serviceName -}}
{{- $serviceFQDN := printf "%s.%s.svc.cluster.local" $serviceName .Release.Namespace -}}
{{- $altNames := .Values.tlsCerts.altNames -}}
{{- $altNames = append $altNames $serviceFQDN -}}
{{- $duration := .Values.tlsCerts.duration | int -}}  # Ensure duration is an integer
{{- $validity := .Values.tlsCerts.ca.validity | int -}}  # Ensure validity is an integer

{{- /* Generate CA and Certificate */ -}}
{{- $ca := genCA .Values.tlsCerts.ca.name $validity -}}  # Ensure $ca is a string
{{- $cert := genSignedCert $serviceName nil $altNames $duration $ca -}}  # Ensure $cert is a map or has cert and key fields

{{- /* Retrieve existing secret if it exists */ -}}
{{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.tlsCerts.secretName) }}

apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: {{ .Values.tlsCerts.secretName }}
  labels:
    app: {{ template "receiver.name" . }}
    chart: {{ template "receiver.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}

data:
  tls.crt: {{ if $existingSecret }}{{ print (index $existingSecret.data "tls.crt") }}{{ else }}{{ $cert.Cert | b64enc }}{{ end }}
  tls.key: {{ if $existingSecret }}{{ print (index $existingSecret.data "tls.key") }}{{ else }}{{ $cert.Key | b64enc }}{{ end }}
  ca.crt: {{ if $existingSecret }}{{ print (index $existingSecret.data "ca.crt") }}{{ else }}{{ $ca.Cert | b64enc }}{{ end }}
{{- end }}