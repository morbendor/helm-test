{{- range $streamName:=.Values.streams }}
{{- with $ -}}
{{- $serviceSuffix := "" }}
  {{- if ne $streamName "general" }}
    {{- $serviceSuffix = printf "-%s" $streamName }}
  {{- end }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "receiver.fullname" . }}{{$serviceSuffix}}
  labels:
    app: {{ template "receiver.name" . }}
    chart: {{ template "receiver.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{ toYaml .Values.service.labels | indent 4 }}
  annotations:
{{ toYaml .Values.service.annotations | indent 4 }}

spec:
  type: {{ .Values.service.type }}
  ports:
{{ toYaml .Values.service.ports | indent 2 }}
  selector:
    app: {{ template "receiver.name" . }}{{$serviceSuffix}}
    release: {{ .Release.Name }}
  sessionAffinity: {{ .Values.serviceAffinity.sessionAffinity}}  
{{- end }}
---
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.servicename }}
  labels:
    app: {{ template "receiver.name" . }}
    chart: {{ template "receiver.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{ toYaml .Values.service.labels | indent 4 }}
  annotations:
{{ toYaml .Values.service.annotations | indent 4 }}

spec:
  type: {{ .Values.service.type }}
  ports:
{{ toYaml .Values.service.ports | indent 2 }}
  selector:
    app: {{ template "receiver.name" . }}
    release: {{ .Release.Name }}
  {{- if .Values.serviceAffinity.sessionAffinity }}
  sessionAffinity: {{ .Values.serviceAffinity.sessionAffinity}}
  sessionAffinityConfig: 
    clientIP:
      timeoutSeconds: {{ .Values.serviceAffinity.timeoutSeconds}}
  {{- else }}
  sessionAffinity: None
  {{- end }}

# Node port service for standalone deployment
---
{{- if .Values.nodePort.enabled }}
{{- $existingService := lookup "v1" "Service" .Release.Namespace (printf "%s-node-port" (include "receiver.fullname" .)) }}
{{- if not $existingService }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "receiver.fullname" . }}-node-port
  labels:
    app: {{ template "receiver.name" . }}
    chart: {{ template "receiver.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: NodePort
  ports:
    - port: {{ .Values.nodePort.service.port }}
      targetPort: 5000
      protocol: TCP
      name: http
      nodePort: {{ .Values.nodePort.service.httpNodePort }}
  selector:
    app: {{ template "receiver.name" . }}
    release: {{ .Release.Name }}
{{- else }}
# Service already exists, read the existing nodePort value
{{- $existingNodePort := index $existingService.spec.ports 0 "nodePort" }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "receiver.fullname" . }}-node-port
  labels:
    app: {{ template "receiver.name" . }}
    chart: {{ template "receiver.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: NodePort
  ports:
    - port: {{ .Values.nodePort.service.port }}
      targetPort: 5000
      protocol: TCP
      name: http
      nodePort: {{ $existingNodePort }}
  selector:
    app: {{ template "receiver.name" . }}
    release: {{ .Release.Name }}
{{- end }}
{{- end }}

---
{{- if .Values.nodePort.enabled }}
{{- $existingServiceTLS := lookup "v1" "Service" .Release.Namespace (printf "%s-node-port-tls" (include "receiver.fullname" .)) }}
{{- if not $existingServiceTLS }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "receiver.fullname" . }}-node-port-tls
  labels:
    app: {{ template "receiver.name" . }}
    chart: {{ template "receiver.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: NodePort
  ports:
    - port: {{ .Values.nodePort.service.sslport }}
      targetPort: 5443
      protocol: TCP
      name: https
      nodePort: {{ .Values.nodePort.service.httpsNodePort }}
  selector:
    app: {{ template "receiver.name" . }}
    release: {{ .Release.Name }}
{{- else }}
# Service already exists, read the existing nodePort value
{{- $existingNodePortTLS := index $existingServiceTLS.spec.ports 0 "nodePort" }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "receiver.fullname" . }}-node-port-tls
  labels:
    app: {{ template "receiver.name" . }}
    chart: {{ template "receiver.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: NodePort
  ports:
    - port: {{ .Values.nodePort.service.sslport }}
      targetPort: 5443
      protocol: TCP
      name: https
      nodePort: {{ $existingNodePortTLS }}
  selector:
    app: {{ template "receiver.name" . }}
    release: {{ .Release.Name }}
{{- end }}
{{- end }}