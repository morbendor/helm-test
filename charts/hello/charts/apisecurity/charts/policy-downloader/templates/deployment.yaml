{{- $root := . -}}
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: {{ template "policy-downloader.fullname" . }}
  labels:
    app: {{ template "policy-downloader.name" . }}
    chart: {{ template "policy-downloader.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    tags.datadoghq.com/env: {{ .Release.Namespace }}
    tags.datadoghq.com/service: {{ template "policy-downloader.name" . }}
    tags.datadoghq.com/version:  {{ template "policy-downloader.version" . }}
spec:
  strategy:
{{ toYaml .Values.updateStrategy | indent 4 }}
  replicas: {{ .Values.replicaCount }}
  minReadySeconds: {{ .Values.minReadySeconds }}
  selector:
    matchLabels:
      app: {{ template "policy-downloader.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "policy-downloader.name" . }}
        release: {{ .Release.Name }}
      annotations:
{{ toYaml .Values.deployment.annotations | indent 8 }}
    spec:
      {{ if eq (default "" .Values.standalone | toString) "true" }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}

      {{- range $name, $value := .Values.env }}
        {{- if eq "REGION" $name }}
          {{- if contains "eks" $value }}
      serviceAccountName: {{ template "policy-downloader.fullname" . }}
      automountServiceAccountToken: true
          {{- end }}
        {{- end }}
      {{- end }}

      {{ if eq (default "" .Values.standalone | toString) "true" }}
      initContainers:
        - name: apisec-infra-utility
          image: {{ template "policy-downloader.imageregistry" . }}/{{ .Values.global.InitContainerInfraUtility.image }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.initContainerEnv }}
          env:
          {{- range $k, $v := .Values.initContainerEnv }}
            - name: {{ $k }}
              value: {{ $v | quote }}
          {{- end }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ template "policy-downloader.imageregistry" . }}/{{ .Values.image.repository }}:{{ template "policy-downloader.imagetag" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
{{ toYaml .Values.deployment.ports | indent 10 }}
          {{- if .Values.env }}
          env:
          {{- if .Values.equinix }}
            - name: POLICY_DOWNLOADER_CLIENT_AUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.configauthsecretname}}
                  key:  {{ .Values.configauthsecretkey }}
          {{- end }}
          {{- range $k, $v := .Values.env }}
            - name: {{ $k }}
              value: {{ $v | quote }}
          {{- end }}
          {{ if eq (default "" .Values.standalone | toString) "true" }}
            - name: CONTROLLER_ID
              valueFrom:
                secretKeyRef:
                  name: controller-secret
                  key: controller-id
            - name: CONTROLLER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: controller-secret
                  key:  controller-token
            - name: CONTROLLER_INSTANCE
              valueFrom:
                secretKeyRef:
                  name: controller-secret
                  key: controller-instance
            - name: ACCOUNT_ID
              valueFrom:
                secretKeyRef:
                  name: controller-secret
                  key: account-id
          {{- end }}
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENV
              value: {{ .Release.Namespace }}
            - name: DD_SERVICE
              value: {{ template "policy-downloader.name" . }}
            - name: DD_VERSION
              value:  {{ template "policy-downloader.version" . }}
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_TRACE_SAMPLE_RATE
              value: "1"
            - name: DD_DOGSTATSD_NON_LOCAL_TRAFFIC
              value: 'true'
            - name: DD_RUNTIME_METRICS_ENABLED
              value: "true"
            - name: DD_JMXFETCH_ENABLED
              value: "true"
          {{- end }}
{{ if .Values.healthChecks.enabled }}
{{ (unset .Values.healthChecks "enabled") | toYaml | indent 10 }}
{{ end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
{{ toYaml .Values.securityContext | indent 12 }}  
          volumeMounts:
{{ toYaml .Values.volumeMounts | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
{{ toYaml .Values.volumes | indent 8 }}


