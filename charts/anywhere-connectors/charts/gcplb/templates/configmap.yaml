{{- if eq "gcplb" .Values.global.ingressType }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "gcplb.fullname" . }}
data:
  envoy.yaml: |
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: {address: 0.0.0.0, port_value: 9901}
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: {{ .Values.service.port }}
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: auto
              stat_prefix: ingress_http
              use_remote_address: true
              xff_num_trusted_hops: 0
              skip_xff_append: false
              access_log: # configure logging
              - name: envoy.file_access_log
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
                  log_format:
                    text_format_source:
                      inline_string: "[%START_TIME%] %REQ(:method)% %REQ(:authority)% %REQ(X-Forwarded-For)% %REQ(X-user-IP)% %REQ(:path)% %PROTOCOL%/%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT% %UPSTREAM_HOST% %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-Envoy-Upstream-Service-Time)% \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(X-B3-TRACEID)%\" \"%REQ(X-B3-SPANID)%\" \"%REQ(X-B3-SAMPLED)%\" \"%REQ(X-B3-FLAGS)%\" \"%REQ(X-OT-SPAN-CONTEXT)%\" \"%REQ(x-amzn-Trace-ID)%\"\n"
              route_config:
                name: security_engine_route # configure the localclus routes
                virtual_hosts:
                - name: imperva-security-engine-svc
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                      grpc: {}
                    route:
                      cluster: ext_proc
              http_filters:
              - name: envoy.filters.http.router # enable the Router filter
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                - certificate_chain: {filename: "/etc/envoy/tls.crt"}
                  private_key: {filename: "/etc/envoy/tls.key"}
      clusters:
      - name: ext_proc
        connect_timeout: 5s
        type: strict_dns
        lb_policy: round_robin
        http2_protocol_options: {}
        load_assignment:
          cluster_name: ext_proc
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.securityEngineServiceName }}.{{.Release.Namespace}}.svc.cluster.local
                    port_value: {{ .Values.securityEngineServicePort }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            sni: {{ .Values.securityEngineServiceName }}.{{.Release.Namespace}}.svc.cluster.local
            common_tls_context:
              validation_context:
                trusted_ca:
                  filename: /etc/envoy/ca.crt
{{- end }}